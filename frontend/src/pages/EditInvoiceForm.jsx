import React, { useEffect, useState } from 'react';
import Footer from '../components/Footer';
import 'bootstrap-icons/font/bootstrap-icons.css';
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { useLocation } from 'react-router-dom';

const EditInvoiceForm = () => {
  const [lines, setLines] = useState([]);
  const [invoiceNumbers, setInvoiceNumbers] = useState([]); // all invoices generated by the user
  //details of user
  const [name, setName] = useState('');
  const [companyName, setCompanyName] = useState('');
  const [bemail, setBemail] = useState('');
  const [phone, setPhone] = useState('');
  const [city, setCity] = useState('');
  //In items all the items that are present in the selected invoice
  const [items, setItems] = useState([]);
  //Client that is associated with the invoice number selected 
  const [clientName, setClientName] = useState('');
  const [clientEmail, setClientEmail] = useState('');
  const [issueDate, setIssueDate] = useState(null);
  const [dueDate, setdueDate] = useState(null);
  const [selectedInvoiceNumber, setSelectedInvoiceNumber] = useState('');
  const [selectedClient, setSelectedClient] = useState();
  const [selectedEmail, setSelectedEmail] = useState();
  //In case Edit is chosen from AllInvoice page then we need to get the invoice number from there
  const location = useLocation();
  const invoiceFormState = location.state?.invoiceNumber;
  //When need to add more items
  const addLine = () => {
    setItems([...items, { invoiceNumber: selectedInvoiceNumber, itemDesc: '', itemRate: 0, itemQty: 0, itemGST: 0 }]);
  };

  //runs after every render
  useEffect(() => {
    // will run only at initial render [] will not run after that
    const fetchInvoicesNumber = async () => {
      try {
        const response = await fetch("http://localhost:5000/getInvoiceNumbers", {
          method: "GET",
          credentials: "include",
        });
        const data = await response.json();
        // console.log("these invoices come from backend", data);
        if (response.ok) {
          setInvoiceNumbers(data.invoices);
        } else {
          console.log("Error: ", data.error);
        }
      } catch (error) {
        console.error("Error fetching invoice data: ", error);
      }
    };

    const fetchUserData = async () => {
      try {
        const response = await fetch("http://localhost:5000/generateInvoice", {
          method: "GET",
          credentials: "include",
        });
        const data = await response.json();
        //console.log("this comes from backend", data);
        if (response.ok) {
          setName(data.name);
          setCompanyName(data.companyName);
          setBemail(data.email);
          setPhone(data.phone);
          setCity(data.city);
        } else {
          console.log("Error: ", data.error);
        }
      } catch (error) {
        console.error("Error fetching user data: ", error);
      }
    };

    const fetchData = async () => {
      await fetchInvoicesNumber();
      await fetchUserData();
      if (invoiceFormState) {
        setSelectedInvoiceNumber(invoiceFormState);
        await handleInvoiceChange({target:{value: invoiceFormState}});
      }
    };

    
    fetchData(); // Call fetchData after defining it
  }, []);

  //When we select a invoice from the dropdown then this 
  //fetch all corrsponding details related to that invoice number
  const handleInvoiceChange = async (e) => {
    const invoiceNumber = e.target.value;
    setSelectedInvoiceNumber(invoiceNumber);
    if (!invoiceNumber) {
      console.error("Invoice number is required");
      return;
    }
    try {
      const response = await fetch(`http://localhost:5000/getEditInvoiceData?invoiceNumber=${invoiceNumber}`, {
        method: "GET",
        credentials: "include",
      });

      const data = await response.json();
      console.log("Fetched Data: ", data); // Log the entire response

      if (response.ok) {
        setClientName(data.invoice.clientName);
        setClientEmail(data.invoice.clientEmail);
        setIssueDate(data.invoice.issueDate ? new Date(data.invoice.issueDate).toLocaleDateString('en-CA') : "");
        setdueDate(data.invoice.dueDate ? new Date(data.invoice.dueDate).toLocaleDateString('en-CA') : "");

        // Set selectedClient and selectedEmail here
        setSelectedClient(data.invoice.clientName);
        setSelectedEmail(data.invoice.clientEmail);

        console.log("Updated Selected Client:", data.invoice.clientName);
        console.log("Updated Selected Email:", data.invoice.clientEmail);

        setItems(data.items || []);
      } else {
        console.log("Error: ", data.error);
      }
    } catch (error) {
      console.error("Error fetching invoice data: ", error);
    }
  };
  //Calculate total for every line and all
  const calculateTotals = () => {
    let subTotal = 0;
    let gstTotal = 0;
    items.forEach(item => {
      const lineTotal = item.itemRate * item.itemQty;
      subTotal += lineTotal;
      gstTotal += lineTotal * (item.itemGST / 100);
    });
    const grandTotal = subTotal + gstTotal;
    return { subTotal, gstTotal, grandTotal };
  };
  //Every time items array or lines changes we calculate totals again
  useEffect(() => {
    calculateTotals();
  }, [items, lines]);  // Recalculate totals when items or lines change

  const { subTotal, gstTotal, grandTotal } = calculateTotals();
  const handleLineChange = (index, field, value) => {
    setLines(prevLines =>
      prevLines.map((line, i) =>
        i === index ? { ...line, [field]: value } : line
      )
    )
  }
  const handleItemChange = (index, field, value) => {
    const updatedItems = [...items];
    updatedItems[index][field] = value;
    updatedItems[index].lineTotal = updatedItems[index].itemRate * updatedItems[index].itemQty;
    updatedItems[index].gstTotal = updatedItems[index].lineTotal * (updatedItems[index].itemGST / 100);
    setItems(updatedItems);
  };
  const deleteItem = (index) => {
    setItems(prevItems => prevItems.filter((_, i) => i !== index));
  };
  /**Fetch GST from db*/
  const fetchGST = async (description, index, isItem) => {
    if (!description)
      return;
    try {
      console.log("Got GST");
      const response = await fetch(`http://localhost:5000/getGST?description=${encodeURIComponent(description)}`, {
        method: "GET",
        credentials: "include",
      });
      const data = await response.json();
      if (response.ok) {
        //setgstValue(data.gst);
        console.log("GST Value : ", data.gst);
        if (isItem) {
          setItems(prevItems =>
            prevItems.map((item, i) =>
              i === index ? { ...item, itemGST: data.gst } : item
            ));
        } else {
          setLines(prevLines =>
            prevLines.map((line, i) =>
              i === index ? { ...line, gst: data.gst } : line
            ));
        }
      } else {
        console.error("Error fetching GST: ", data.error);
      }
    } catch (error) {
      console.error("Error fetching GST: ", error);
    }
  };

  /*It should be update to database */
  const saveInvoiceChangesToDataBase = async (statusValue) => {
    let status;
    const invoiceData = {
      issueDate,
      dueDate,
      selectedInvoiceNumber,
      items, //iske ander desc of item,rate,qty 
      subTotal,
      gstTotal,
      grandTotal,
      status: statusValue,
    };
    console.log("This data is going to be saveddddd", invoiceData);
    try {
      const response = await fetch('http://localhost:5000/saveInvoiceChangesToDataBase', {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(invoiceData),
      });

      const data = await response.json();
      if (response.ok) {
        // alert("Invoice saved successfully!");
        toast.success("Invoice edited successfully.");
        setTimeout(() => { }, 500);
      }
      else {
        alert(`Error: ${data.error}`);
      }
    }
    catch (error) {
      console.error("Error saving invoice:", error);
      alert("Failed to save invoice.");
    }
  };

  function formatDateForICS(date) {
    const d = new Date(date + 'T00:00:00Z');
    return d.toISOString().replace(/[-:]/g, '').split('.')[0] + 'Z';
  }

  //send email to client
  const sendInvoiceEmail = async (event) => {
    console.log("Item being copied are : ", items.Qty, items.itemRate, items.itemDesc, items.itemGST);
    const linesToSend = items.map(item => ({
      description: item.itemDesc,
      quantity: item.itemQty,
      rate: item.itemRate,
      gst: item.itemGST,
    }));

    event.preventDefault();
    // Check if selectedClient is defined
    if (!selectedClient) {
      alert("Client name is not selected.");
      return;
    }
    const name = selectedClient.replace(/\s+/g, "").toLowerCase();
    const email = name + "@resend.dev"; // Dummy email, replace later.
    console.log("Data to form is : ", items, selectedInvoiceNumber);
    try {
      // Step 1: Generate Invoice PDF
      const pdfResponse = await fetch("http://localhost:5000/generateInvoicePDF", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          lines: linesToSend, name, companyName, bemail, phone, city, selectedClient, selectedEmail,
          issueDate, dueDate, selectedInvoiceNumber, subTotal, gstTotal, grandTotal,
        }),
      });

      if (!pdfResponse.ok) {
        throw new Error("Failed to generate invoice PDF.");
      }

      // Convert response into a Blob
      const pdfBlob = await pdfResponse.blob();
      const pdfUrl = URL.createObjectURL(pdfBlob);
      window.open(pdfUrl, "_blank");

      // Prepare Base64 of PDF
      const pdfBase64 = await blobToBase64(pdfBlob);
      // Create Google Calendar link
      const eventTitle = encodeURIComponent("Invoice due reminder");
      const eventDescription = encodeURIComponent("Reminder to pay invoice before due date");
      const startDateTime = formatDateForICS(issueDate);
      const endDateTime = formatDateForICS(dueDate);
      const googleCalendarLink = `https://calendar.google.com/calendar/render?action=TEMPLATE&text=${eventTitle}&&dates=${startDateTime}/${endDateTime}&details=${eventDescription}`;
      console.log("Sender email is : ", email);
      console.log("Recipient email is : ", selectedEmail);
      /* const emailResponse = await fetch("http://localhost:5000/sendInvoiceEmail", {
         method: "POST",
         headers: { "Content-Type": "application/json" },
         body: JSON.stringify({
           senderEmail: email,
           recipientEmail: selectedEmail,
           clientName: selectedClient,
           pdfBase64: pdfBase64,
           calendarLink: googleCalendarLink,
         }),
       });
   
       const emailResult = await emailResponse.json();
       if (emailResult.success) {
         alert("Invoice sent successfully!");
       } else {
         alert("Failed to send invoice email.");
       }*/
    } catch (error) {
      console.error("Error:", error);
      alert("Something went wrong!");
    }
  };
  // Helper function to convert Blob to Base64
  const blobToBase64 = (blob) => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onloadend = () => {
        const base64data = reader.result.split(',')[1];
        resolve(base64data);
      };
      reader.onerror = reject;
      reader.readAsDataURL(blob);
    });
  };
  //to call both save and email fx. simultaneously
  const handleUpdateToClient = async (e) => {
    e.preventDefault();
    //console.log("Selected Client:", selectedClient);
    //console.log("Selected Email:", selectedEmail);
    console.log("Lines are : ", lines);
    console.log("Items are : ", items);
    await saveInvoiceChangesToDataBase("sent");
    console.log("After Lines are : ", lines);
    console.log("Items are : ", items);
    await sendInvoiceEmail(e);
  };

  return (
    <div className="min-h-screen flex flex-col justify-between items-center bg-gradient-to-tr from-indigo-400 via-teal-100 to-blue-300">
      <div className="w-2/3 flex flex-col">
        <div className='flex justify-between'>
          <h3 className='text-3xl font-bold text-blue-700 mt-2'>Edit Invoice</h3>
          <div className='flex gap-4'>
            <button href="#" className='mt-2 mr-3 bg-red-600 hover:bg-red-700 pt-1 pb-1 pr-4 pl-4 rounded-md text-white' onClick={() => window.history.back()}>Cancel</button>
            <button className='pt-1 pb-1 pr-4 pl-4 bg-blue-600 text-white mt-2 rounded' onClick={() => { saveInvoiceChangesToDataBase("saved") }}>Save</button>
          </div>
        </div>
        <div className='flex mt-5 bg-white p-2 rounded items-center'>
          <label htmlFor="" className='text-xl text-green-600 ml-2'>Invoice Number</label>
          <select
            name=""
            id=""
            className="ml-16 p-1 pl-2 pr-2 w-50 border-2 rounded"
            onChange={handleInvoiceChange}
            value={invoiceFormState || ""}
          >
            <option value="">Select an Invoice</option>
            {invoiceNumbers.map((invoice, index) => (
              <option key={index} value={invoice.invoiceNumber}>
                {invoice.invoiceNumber}
              </option>
            ))}
          </select>


        </div>
        <form action="" className='mt-4 mb-7 bg-white p-6 rounded shadow-lg'>
          <div className='flex flex-col bg-zinc-100 p-3 rounded'>
            <p className='mt-2'><strong>Name:  {name ? `${name}` : "Loading..."}</strong></p>
            <p className='mt-2'><strong>Company Name:  {companyName ? `${companyName}` : "Loading..."}</strong></p>
            <p className='mt-2'><strong>Phone: {phone ? `${phone}` : "Loading..."}</strong></p>
            <p className='mt-2'><strong>Address: {city ? `${city}` : "Loading..."}</strong></p>
          </div>

          <div className='flex gap-20 mt-6'>
            <div className='flex flex-col w-1/4'>
              <div className='font-bold'>Billed to</div>
              <div className='mt-2'>
                <p className='mt-2'>{clientName}</p>
                <p className='mt-2'>{clientEmail}</p>
              </div>
            </div>
            <div className='flex flex-col w-1/4'>
              <div className='text-gray-700'>Date of issue</div>
              <input className='bg-zinc-200 p-2 rounded mt-2' type="date" value={issueDate} onChange={(e) => setIssueDate(e.target.value)} />
              <div className='text-gray-700 mt-4'>Due Date</div>
              <input className='bg-zinc-200 p-2 rounded mt-2' type="date" value={dueDate} onChange={(e) => setdueDate(e.target.value)} />
            </div>
            <div className='flex flex-col w-1/4 items-center'>
              <div className='text-gray-700 mt-6'>Invoice number</div>
              <div className='mt-2 bg-zinc-200 p-2 rounded w-32 text-center text-gray-600'>{selectedInvoiceNumber}</div>
            </div>
            <div className='flex flex-col w-1/4 items-center'>
              <div className='text-2xl font-bold mt-6'>Total Amount</div>
              <div className='mt-3 text-2xl text-green-700 font-semibold'>₹ {grandTotal.toFixed(2)}</div>
            </div>
          </div>
          <hr className='mt-5 border-gray-400' />
          <div className='flex text-zinc-600 mt-2 mb-4 font-semibold'>
            <div className='w-1/2'>Description</div>
            <div className='w-1/6'>Rate</div>
            <div className='w-1/6'>Qty</div>
            <div className='w-1/6 text-center'>Line Total</div>
            <div className='w-1/6 text-center'>After GST</div>
          </div>

          {items.length > 0 ? (
            items.map((item, index1) => (
              <div key={index1} className='flex text-zinc-500 mt-2'>
                <i className='bi bi-trash text-red-500 cursor-pointer mr-2 mt-2' onClick={() => deleteItem(index1)}></i>
                <input className="bg-zinc-200 p-2 rounded w-2/5" type="text" placeholder={item.itemDesc}
                  onChange={(e) => {
                    const value = e.target.value;
                    handleItemChange(index1, "itemDesc", value); // Use handleItemChange instead
                  }}
                  onBlur={(e) => {
                    fetchGST(e.target.value, index1, true); // Fetch GST
                  }}
                />

                <input className='bg-zinc-200 p-2 rounded w-1/6 ml-4' type="number" placeholder={item.itemRate} onChange={(e) => handleItemChange(index1, 'itemRate', e.target.value)} />
                <input className='bg-zinc-200 p-2 rounded w-1/6 ml-4' type="number" placeholder={item.itemQty} onChange={(e) => handleItemChange(index1, 'itemQty', e.target.value)} />
                <input className='bg-zinc-200 p-2 rounded w-1/6 ml-4' type="text" value={(item.itemRate * item.itemQty).toFixed(2)} readOnly />
                <input placeholder='Adding GST' className='bg-zinc-200 p-2 rounded w-1/6 ml-4'
                  value={((item.itemRate * item.itemQty) + ((item.itemRate * item.itemQty) * item.itemGST) / 100 || 0).toFixed(2)}
                  readOnly
                />

              </div>
            ))
          ) : (
            <p className="text-center text-gray-500 mt-2">No items available</p>
          )}

          {lines.map((line, index2) => (
            <div key={index2} className='flex text-zinc-500 mt-2'>
              <i className='bi bi-trash text-red-500 cursor-pointer mr-2 mt-2' onClick={() => deleteItem(index2)}></i>
              <input className="bg-zinc-200 p-2 rounded w-2/5" type="text" placeholder="Description"
                onChange={(e) => {
                  const value = e.target.value;
                  handleLineChange(index2, "description", value);
                }}
                onBlur={(e) => {
                  fetchGST(e.target.value, index2); // Fetch GST
                }
                } />
              <input className='bg-zinc-200 p-2 rounded w-1/6 ml-4' type="number" placeholder="Rate" onChange={(e) => handleLineChange(index2, "rate", e.target.value)} />
              <input className='bg-zinc-200 p-2 rounded w-1/6 ml-4' type="number" placeholder="Qty" onChange={(e) => handleLineChange(index2, "qty", e.target.value)} />
              <input className='bg-zinc-200 p-2 rounded w-1/6 ml-4' type="text" placeholder="Line Total" value={line.rate * line.qty || 0} readOnly />
              <input placeholder='Adding GST' className='bg-zinc-200 p-2 rounded w-1/6 ml-4' value={(line.rate * line.qty) + ((line.rate * line.qty) * line.gst) / 100 || 0} />
            </div>
          ))}

          <div className='mt-3 w-full border-dashed border-2 border-blue-500 rounded p-3 text-center cursor-pointer hover:bg-blue-100' onClick={addLine}>
            + Add a Line
          </div>
          <div className='flex flex-col items-end mt-6'>
            <div className='flex justify-between w-1/4'>
              <div className='font-semibold'>Subtotal</div>
              <div>₹ {subTotal.toFixed(2)}</div>
            </div>
            <div className='flex justify-between w-1/4 mt-2'>
              <div className='font-semibold'>GST Total</div>
              <div>₹ {gstTotal.toFixed(2)}</div>
            </div>
            <hr className='w-1/4 my-2 border-gray-400' />
            <div className='flex justify-between w-1/4'>
              <div className='font-bold'>Grand Total</div>
              <div className='font-bold'>₹ {grandTotal.toFixed(2)}</div>
            </div>
          </div>
          <div className='flex justify-end'>
            <button className='bg-blue-600 mt-5 w-40 p-3 font-bold text-white rounded hover:bg-blue-700 transition duration-300' onClick={handleUpdateToClient}>Update to Client</button>
          </div>
        </form>
      </div>
      <ToastContainer position="top-right" autoClose={3000} />
      <Footer />
    </div>
  );
};

export default EditInvoiceForm;
